// FRONTEND/composables/useTiposArticulo.js
export const useTiposArticulo = () => {
  const { api } = useApi()

  // Estado reactivo para tipos de art√≠culo
  const tiposArticuloState = ref({
    loading: false,
    error: null,
    tipos: [],
    tipoActual: null
  })

  // ===== FUNCIONES PRINCIPALES =====

  // Obtener todos los tipos de art√≠culo disponibles
  const getTiposArticulo = async (forceRefresh = false) => {
    try {
      // Si ya tenemos datos y no se fuerza el refresh, usar cache
      if (tiposArticuloState.value.tipos.length > 0 && !forceRefresh) {
        console.log('üîÑ Usando tipos de art√≠culo desde cach√©')
        return tiposArticuloState.value.tipos
      }

      console.log('üîÑ Cargando tipos de art√≠culo...')
      tiposArticuloState.value.loading = true
      tiposArticuloState.value.error = null

      const response = await api('/solicitudes/tipos-articulo')

      if (response.success && response.data.tiposArticulo) {
        tiposArticuloState.value.tipos = response.data.tiposArticulo
        console.log('‚úÖ Tipos de art√≠culo cargados:', response.data.tiposArticulo.length)
        return response.data.tiposArticulo
      } else {
        throw new Error(response.message || 'Error cargando tipos de art√≠culo')
      }

    } catch (error) {
      console.error('‚ùå Error cargando tipos de art√≠culo:', error)
      tiposArticuloState.value.error = error.message
      throw error
    } finally {
      tiposArticuloState.value.loading = false
    }
  }

  // Obtener un tipo de art√≠culo espec√≠fico por ID
  const getTipoArticuloById = async (id) => {
    try {
      console.log('üîÑ Buscando tipo de art√≠culo ID:', id)

      // Primero buscar en la lista cargada
      let tipo = tiposArticuloState.value.tipos.find(t => t.id === parseInt(id))
      
      if (!tipo) {
        // Si no est√° en la lista, cargar todos los tipos
        await getTiposArticulo(true)
        tipo = tiposArticuloState.value.tipos.find(t => t.id === parseInt(id))
      }

      if (!tipo) {
        throw new Error('Tipo de art√≠culo no encontrado')
      }

      tiposArticuloState.value.tipoActual = tipo
      console.log('‚úÖ Tipo de art√≠culo encontrado:', tipo.nombre)
      return tipo

    } catch (error) {
      console.error('‚ùå Error obteniendo tipo de art√≠culo:', error)
      throw error
    }
  }

  // Buscar tipos de art√≠culo por nombre
  const buscarTiposPorNombre = (termino) => {
    if (!termino || termino.length < 2) {
      return tiposArticuloState.value.tipos
    }

    const terminoLower = termino.toLowerCase()
    return tiposArticuloState.value.tipos.filter(tipo => 
      tipo.nombre.toLowerCase().includes(terminoLower)
    )
  }

  // Obtener tipos que requieren especificaciones electr√≥nicas
  const getTiposElectronicos = () => {
    return tiposArticuloState.value.tipos.filter(tipo => tipo.requiereElectronico)
  }

  // Obtener tipos por rango de porcentaje de aval√∫o
  const getTiposPorRangoAvaluo = (porcentajeMin = 0, porcentajeMax = 100) => {
    return tiposArticuloState.value.tipos.filter(tipo => {
      const minAvaluo = parseFloat(tipo.porcentajeMinAvaluo)
      const maxAvaluo = parseFloat(tipo.porcentajeMaxAvaluo)
      
      return minAvaluo >= porcentajeMin && maxAvaluo <= porcentajeMax
    })
  }

  // ===== FUNCIONES DE VALIDACI√ìN =====

  // Validar si un art√≠culo cumple con los requisitos del tipo
  const validarArticuloParaTipo = (articulo, tipoId) => {
    const tipo = tiposArticuloState.value.tipos.find(t => t.id === parseInt(tipoId))
    
    if (!tipo) {
      return {
        valido: false,
        errores: ['Tipo de art√≠culo no v√°lido']
      }
    }

    const errores = []

    // Validar campos obligatorios b√°sicos
    if (!articulo.descripcion || articulo.descripcion.trim().length < 10) {
      errores.push('La descripci√≥n debe tener al menos 10 caracteres')
    }

    if (!articulo.estadoFisico) {
      errores.push('El estado f√≠sico es obligatorio')
    }

    // Validar especificaciones t√©cnicas para electr√≥nicos
    if (tipo.requiereElectronico && 
        (!articulo.especificacionesTecnicas || articulo.especificacionesTecnicas.trim().length < 20)) {
      errores.push('Los art√≠culos electr√≥nicos requieren especificaciones t√©cnicas detalladas (m√≠n. 20 caracteres)')
    }

    // Validar marca y modelo para ciertos tipos
    if (tipo.requiereElectronico && !articulo.marca) {
      errores.push('La marca es obligatoria para art√≠culos electr√≥nicos')
    }

    // Validar valor estimado si se proporciona
    if (articulo.valorEstimadoCliente) {
      const valor = parseFloat(articulo.valorEstimadoCliente)
      if (isNaN(valor) || valor <= 0) {
        errores.push('El valor estimado debe ser un n√∫mero mayor a 0')
      }
    }

    return {
      valido: errores.length === 0,
      errores,
      tipo
    }
  }

  // ===== FUNCIONES DE UTILIDAD =====

  // Calcular rango de aval√∫o estimado
  const calcularRangoAvaluo = (valorEstimado, tipoId) => {
    const tipo = tiposArticuloState.value.tipos.find(t => t.id === parseInt(tipoId))
    
    if (!tipo || !valorEstimado) {
      return { min: 0, max: 0 }
    }

    const valor = parseFloat(valorEstimado)
    const porcentajeMin = parseFloat(tipo.porcentajeMinAvaluo) / 100
    const porcentajeMax = parseFloat(tipo.porcentajeMaxAvaluo) / 100

    return {
      min: Math.round(valor * porcentajeMin),
      max: Math.round(valor * porcentajeMax),
      tipo: tipo.nombre
    }
  }

  // Formatear informaci√≥n del tipo para mostrar
  const formatearTipoInfo = (tipo) => {
    if (!tipo) return null

    return {
      id: tipo.id,
      nombre: tipo.nombre,
      requiereElectronico: tipo.requiereElectronico,
      rangoAvaluo: `${tipo.porcentajeMinAvaluo}% - ${tipo.porcentajeMaxAvaluo}%`,
      descripcionRango: `Entre ${tipo.porcentajeMinAvaluo}% y ${tipo.porcentajeMaxAvaluo}% del valor estimado`,
      icono: getIconoTipo(tipo.nombre),
      categoria: getCategoriaTipo(tipo.nombre)
    }
  }

  // Obtener √≠cono seg√∫n el tipo
  const getIconoTipo = (nombreTipo) => {
    const iconos = {
      'Joyer√≠a': 'üíé',
      'Oro': 'üü®',
      'Plata': '‚ö™',
      'Electr√≥nicos': 'üì±',
      'Computadoras': 'üíª',
      'Celulares': 'üì±',
      'Tablets': 'üì±',
      'Televisores': 'üì∫',
      'Electrodom√©sticos': 'üè†',
      'Veh√≠culos': 'üöó',
      'Motos': 'üèçÔ∏è',
      'Herramientas': 'üîß',
      'Instrumentos Musicales': 'üéµ',
      'Relojes': '‚åö',
      'Antig√ºedades': 'üè∫',
      'Arte': 'üé®',
      'Deportes': '‚öΩ',
      'C√°maras': 'üì∑'
    }

    // Buscar coincidencia exacta o parcial
    for (const [clave, icono] of Object.entries(iconos)) {
      if (nombreTipo.toLowerCase().includes(clave.toLowerCase()) ||
          clave.toLowerCase().includes(nombreTipo.toLowerCase())) {
        return icono
      }
    }

    return 'üì¶' // √çcono por defecto
  }

  // Obtener categor√≠a del tipo
  const getCategoriaTipo = (nombreTipo) => {
    const categorias = {
      'Joyer√≠a': ['Joyer√≠a', 'Oro', 'Plata', 'Relojes', 'Diamantes'],
      'Electr√≥nicos': ['Electr√≥nicos', 'Computadoras', 'Celulares', 'Tablets', 'Televisores', 'C√°maras'],
      'Hogar': ['Electrodom√©sticos', 'Muebles', 'Decoraci√≥n'],
      'Veh√≠culos': ['Veh√≠culos', 'Motos', 'Bicicletas'],
      'Otros': ['Herramientas', 'Instrumentos Musicales', 'Antig√ºedades', 'Arte', 'Deportes']
    }

    for (const [categoria, tipos] of Object.entries(categorias)) {
      if (tipos.some(tipo => nombreTipo.toLowerCase().includes(tipo.toLowerCase()))) {
        return categoria
      }
    }

    return 'Otros'
  }

  // Agrupar tipos por categor√≠a
  const getTiposAgrupados = () => {
    const grupos = {}
    
    tiposArticuloState.value.tipos.forEach(tipo => {
      const categoria = getCategoriaTipo(tipo.nombre)
      
      if (!grupos[categoria]) {
        grupos[categoria] = []
      }
      
      grupos[categoria].push({
        ...tipo,
        icono: getIconoTipo(tipo.nombre)
      })
    })

    // Ordenar cada grupo alfab√©ticamente
    Object.keys(grupos).forEach(categoria => {
      grupos[categoria].sort((a, b) => a.nombre.localeCompare(b.nombre))
    })

    return grupos
  }

  // Obtener sugerencias para un art√≠culo
  const getSugerenciasPorDescripcion = (descripcion) => {
    if (!descripcion || descripcion.length < 3) {
      return []
    }

    const descripcionLower = descripcion.toLowerCase()
    const sugerencias = []

    tiposArticuloState.value.tipos.forEach(tipo => {
      let puntuacion = 0
      
      // Coincidencia exacta en nombre
      if (tipo.nombre.toLowerCase().includes(descripcionLower)) {
        puntuacion += 10
      }

      // Palabras clave espec√≠ficas
      const palabrasClave = {
        'celular': ['Celulares', 'Electr√≥nicos'],
        'computadora': ['Computadoras', 'Electr√≥nicos'],
        'laptop': ['Computadoras', 'Electr√≥nicos'],
        'tv': ['Televisores', 'Electr√≥nicos'],
        'televisor': ['Televisores', 'Electr√≥nicos'],
        'anillo': ['Joyer√≠a', 'Oro', 'Plata'],
        'cadena': ['Joyer√≠a', 'Oro', 'Plata'],
        'reloj': ['Relojes', 'Joyer√≠a'],
        'carro': ['Veh√≠culos'],
        'moto': ['Motos', 'Veh√≠culos'],
        'guitarra': ['Instrumentos Musicales'],
        'piano': ['Instrumentos Musicales'],
        'taladro': ['Herramientas'],
        'nevera': ['Electrodom√©sticos'],
        'lavadora': ['Electrodom√©sticos']
      }

      for (const [palabra, tipos] of Object.entries(palabrasClave)) {
        if (descripcionLower.includes(palabra) && tipos.includes(tipo.nombre)) {
          puntuacion += 5
        }
      }

      if (puntuacion > 0) {
        sugerencias.push({
          tipo,
          puntuacion,
          razon: puntuacion >= 10 ? 'Coincidencia exacta' : 'Palabra clave relacionada'
        })
      }
    })

    return sugerencias
      .sort((a, b) => b.puntuacion - a.puntuacion)
      .slice(0, 3)
      .map(s => ({
        ...s.tipo,
        icono: getIconoTipo(s.tipo.nombre),
        razon: s.razon
      }))
  }

  // Limpiar estado
  const clearState = () => {
    tiposArticuloState.value = {
      loading: false,
      error: null,
      tipos: [],
      tipoActual: null
    }
  }

  // ===== COMPUTED PROPERTIES =====

  // Tipos ordenados alfab√©ticamente
  const tiposOrdenados = computed(() => {
    return [...tiposArticuloState.value.tipos].sort((a, b) => a.nombre.localeCompare(b.nombre))
  })

  // Tipos m√°s populares (simulado - se podr√≠a obtener de estad√≠sticas)
  const tiposPopulares = computed(() => {
    const populares = ['Celulares', 'Joyer√≠a', 'Computadoras', 'Relojes', 'Electr√≥nicos']
    return tiposArticuloState.value.tipos
      .filter(tipo => populares.includes(tipo.nombre))
      .sort((a, b) => populares.indexOf(a.nombre) - populares.indexOf(b.nombre))
  })

  // Estad√≠sticas de tipos
  const estadisticasTipos = computed(() => {
    const total = tiposArticuloState.value.tipos.length
    const electronicos = tiposArticuloState.value.tipos.filter(t => t.requiereElectronico).length
    const grupos = getTiposAgrupados()

    return {
      total,
      electronicos,
      noElectronicos: total - electronicos,
      categorias: Object.keys(grupos).length,
      grupos
    }
  })

  return {
    // Estado
    tiposArticuloState: readonly(tiposArticuloState),
    
    // Funciones principales
    getTiposArticulo,
    getTipoArticuloById,
    buscarTiposPorNombre,
    getTiposElectronicos,
    getTiposPorRangoAvaluo,
    
    // Validaci√≥n
    validarArticuloParaTipo,
    
    // Utilidades
    calcularRangoAvaluo,
    formatearTipoInfo,
    getIconoTipo,
    getCategoriaTipo,
    getTiposAgrupados,
    getSugerenciasPorDescripcion,
    
    // Estado y limpieza
    clearState,
    
    // Computed
    tiposOrdenados,
    tiposPopulares,
    estadisticasTipos
  }
}