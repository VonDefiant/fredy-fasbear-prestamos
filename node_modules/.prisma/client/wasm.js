
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsuarioScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  apellido: 'apellido',
  email: 'email',
  telefono: 'telefono',
  direccion: 'direccion',
  fechaRegistro: 'fechaRegistro',
  tipoUsuario: 'tipoUsuario',
  estado: 'estado',
  cedula: 'cedula',
  fechaNacimiento: 'fechaNacimiento',
  passwordHash: 'passwordHash',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TipoArticuloScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  porcentajeMinAvaluo: 'porcentajeMinAvaluo',
  porcentajeMaxAvaluo: 'porcentajeMaxAvaluo',
  requiereElectronico: 'requiereElectronico',
  estado: 'estado',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SolicitudPrestamoScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  fechaSolicitud: 'fechaSolicitud',
  estado: 'estado',
  observaciones: 'observaciones',
  fechaEvaluacion: 'fechaEvaluacion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ArticuloScalarFieldEnum = {
  id: 'id',
  solicitudId: 'solicitudId',
  tipoArticuloId: 'tipoArticuloId',
  descripcion: 'descripcion',
  marca: 'marca',
  modelo: 'modelo',
  serie: 'serie',
  color: 'color',
  estadoFisico: 'estadoFisico',
  valorEstimadoCliente: 'valorEstimadoCliente',
  especificacionesTecnicas: 'especificacionesTecnicas',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AvaluoScalarFieldEnum = {
  id: 'id',
  articuloId: 'articuloId',
  evaluadorId: 'evaluadorId',
  valorComercial: 'valorComercial',
  porcentajeAplicado: 'porcentajeAplicado',
  montoPrestamo: 'montoPrestamo',
  fechaAvaluo: 'fechaAvaluo',
  observaciones: 'observaciones',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContratoScalarFieldEnum = {
  id: 'id',
  solicitudId: 'solicitudId',
  numeroContrato: 'numeroContrato',
  fechaCreacion: 'fechaCreacion',
  fechaFirma: 'fechaFirma',
  estadoFirma: 'estadoFirma',
  contenidoContrato: 'contenidoContrato',
  hashFirma: 'hashFirma',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PrestamoScalarFieldEnum = {
  id: 'id',
  contratoId: 'contratoId',
  montoPrestado: 'montoPrestado',
  tasaInteres: 'tasaInteres',
  plazoMeses: 'plazoMeses',
  fechaInicio: 'fechaInicio',
  fechaVencimiento: 'fechaVencimiento',
  estado: 'estado',
  saldoPendiente: 'saldoPendiente',
  costoAlmacenamiento: 'costoAlmacenamiento',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanPagosScalarFieldEnum = {
  id: 'id',
  prestamoId: 'prestamoId',
  numeroCuota: 'numeroCuota',
  fechaVencimiento: 'fechaVencimiento',
  montoCuota: 'montoCuota',
  montoCapital: 'montoCapital',
  montoInteres: 'montoInteres',
  estado: 'estado',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PagoScalarFieldEnum = {
  id: 'id',
  prestamoId: 'prestamoId',
  montoPago: 'montoPago',
  fechaPago: 'fechaPago',
  tipoPago: 'tipoPago',
  comprobante: 'comprobante',
  estadoValidacion: 'estadoValidacion',
  validadorId: 'validadorId',
  observaciones: 'observaciones',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductoTiendaScalarFieldEnum = {
  id: 'id',
  articuloId: 'articuloId',
  precioVenta: 'precioVenta',
  fechaPublicacion: 'fechaPublicacion',
  estado: 'estado',
  descuentoAplicado: 'descuentoAplicado',
  diasEnInventario: 'diasEnInventario',
  categoria: 'categoria',
  valoracionPromedio: 'valoracionPromedio',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PedidoScalarFieldEnum = {
  id: 'id',
  usuarioCompradorId: 'usuarioCompradorId',
  fechaPedido: 'fechaPedido',
  totalPedido: 'totalPedido',
  estadoPedido: 'estadoPedido',
  direccionEnvio: 'direccionEnvio',
  metodoPago: 'metodoPago',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DetallePedidoScalarFieldEnum = {
  id: 'id',
  pedidoId: 'pedidoId',
  productoId: 'productoId',
  cantidad: 'cantidad',
  precioUnitario: 'precioUnitario',
  subtotal: 'subtotal',
  createdAt: 'createdAt'
};

exports.Prisma.CarritoScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  productoId: 'productoId',
  cantidad: 'cantidad',
  fechaAgregado: 'fechaAgregado'
};

exports.Prisma.RutaCobranzaScalarFieldEnum = {
  id: 'id',
  cobradorId: 'cobradorId',
  fechaRuta: 'fechaRuta',
  zonaAsignada: 'zonaAsignada',
  estado: 'estado',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VisitaCobranzaScalarFieldEnum = {
  id: 'id',
  rutaId: 'rutaId',
  prestamoId: 'prestamoId',
  fechaVisita: 'fechaVisita',
  resultado: 'resultado',
  montoCobrado: 'montoCobrado',
  observaciones: 'observaciones',
  ubicacionGps: 'ubicacionGps',
  createdAt: 'createdAt'
};

exports.Prisma.DocumentoScalarFieldEnum = {
  id: 'id',
  tipoDocumento: 'tipoDocumento',
  nombreArchivo: 'nombreArchivo',
  rutaArchivo: 'rutaArchivo',
  fechaSubida: 'fechaSubida',
  idRelacionado: 'idRelacionado',
  tipoRelacion: 'tipoRelacion',
  tamanoArchivo: 'tamanoArchivo',
  tipoMime: 'tipoMime',
  createdAt: 'createdAt'
};

exports.Prisma.ParametrosSistemaScalarFieldEnum = {
  id: 'id',
  nombreParametro: 'nombreParametro',
  valorParametro: 'valorParametro',
  descripcion: 'descripcion',
  tipoDato: 'tipoDato',
  fechaModificacion: 'fechaModificacion',
  usuarioModificoId: 'usuarioModificoId',
  createdAt: 'createdAt'
};

exports.Prisma.ComentarioProductoScalarFieldEnum = {
  id: 'id',
  productoId: 'productoId',
  usuarioId: 'usuarioId',
  calificacion: 'calificacion',
  comentario: 'comentario',
  fechaComentario: 'fechaComentario',
  createdAt: 'createdAt'
};

exports.Prisma.SesionUsuarioScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  ipInicio: 'ipInicio',
  userAgent: 'userAgent',
  fechaInicio: 'fechaInicio',
  fechaFin: 'fechaFin',
  tipoSesion: 'tipoSesion',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.TipoUsuario = exports.$Enums.TipoUsuario = {
  Cliente: 'Cliente',
  Administrador: 'Administrador',
  Evaluador: 'Evaluador',
  Cobrador: 'Cobrador'
};

exports.Estado = exports.$Enums.Estado = {
  Activo: 'Activo',
  Inactivo: 'Inactivo'
};

exports.EstadoSolicitud = exports.$Enums.EstadoSolicitud = {
  Pendiente: 'Pendiente',
  Aprobada: 'Aprobada',
  Rechazada: 'Rechazada'
};

exports.EstadoFisico = exports.$Enums.EstadoFisico = {
  Excelente: 'Excelente',
  Bueno: 'Bueno',
  Regular: 'Regular',
  Malo: 'Malo'
};

exports.EstadoFirma = exports.$Enums.EstadoFirma = {
  Pendiente: 'Pendiente',
  Firmado: 'Firmado'
};

exports.EstadoPrestamo = exports.$Enums.EstadoPrestamo = {
  Activo: 'Activo',
  Pagado: 'Pagado',
  Vencido: 'Vencido',
  En_Mora: 'En_Mora'
};

exports.EstadoCuota = exports.$Enums.EstadoCuota = {
  Pendiente: 'Pendiente',
  Pagado: 'Pagado',
  Vencido: 'Vencido'
};

exports.TipoPago = exports.$Enums.TipoPago = {
  Transferencia: 'Transferencia',
  Efectivo: 'Efectivo',
  Cheque: 'Cheque',
  Digital: 'Digital'
};

exports.EstadoValidacion = exports.$Enums.EstadoValidacion = {
  Pendiente: 'Pendiente',
  Validado: 'Validado',
  Rechazado: 'Rechazado'
};

exports.EstadoProducto = exports.$Enums.EstadoProducto = {
  Disponible: 'Disponible',
  Vendido: 'Vendido',
  Retirado: 'Retirado'
};

exports.EstadoPedido = exports.$Enums.EstadoPedido = {
  Procesando: 'Procesando',
  Enviado: 'Enviado',
  Entregado: 'Entregado',
  Cancelado: 'Cancelado'
};

exports.EstadoRuta = exports.$Enums.EstadoRuta = {
  Asignada: 'Asignada',
  En_Progreso: 'En_Progreso',
  Completada: 'Completada'
};

exports.ResultadoVisita = exports.$Enums.ResultadoVisita = {
  Pago: 'Pago',
  Promesa: 'Promesa',
  No_Contacto: 'No_Contacto'
};

exports.TipoDocumento = exports.$Enums.TipoDocumento = {
  Foto_Prenda: 'Foto_Prenda',
  Especificaciones: 'Especificaciones',
  Comprobante: 'Comprobante',
  Contrato: 'Contrato',
  Identificacion: 'Identificacion'
};

exports.TipoRelacion = exports.$Enums.TipoRelacion = {
  Solicitud: 'Solicitud',
  Pago: 'Pago',
  Visita: 'Visita',
  Usuario: 'Usuario'
};

exports.TipoDato = exports.$Enums.TipoDato = {
  STRING: 'STRING',
  INTEGER: 'INTEGER',
  DECIMAL: 'DECIMAL',
  BOOLEAN: 'BOOLEAN',
  DATE: 'DATE'
};

exports.Prisma.ModelName = {
  Usuario: 'Usuario',
  TipoArticulo: 'TipoArticulo',
  SolicitudPrestamo: 'SolicitudPrestamo',
  Articulo: 'Articulo',
  Avaluo: 'Avaluo',
  Contrato: 'Contrato',
  Prestamo: 'Prestamo',
  PlanPagos: 'PlanPagos',
  Pago: 'Pago',
  ProductoTienda: 'ProductoTienda',
  Pedido: 'Pedido',
  DetallePedido: 'DetallePedido',
  Carrito: 'Carrito',
  RutaCobranza: 'RutaCobranza',
  VisitaCobranza: 'VisitaCobranza',
  Documento: 'Documento',
  ParametrosSistema: 'ParametrosSistema',
  ComentarioProducto: 'ComentarioProducto',
  SesionUsuario: 'SesionUsuario'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
